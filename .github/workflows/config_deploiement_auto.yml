name: Construction du code d'automatisation de déploiement sur GitHub et le serveur de production

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  Test-process:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_HOSTNAME: localhost
      DATABASE_PORT: "5432"
      DATABASE_PASSWORD: password
      DATABASE_NAME: testdb
      DATABASE_USERNAME: user
      SECRET_KEY: secret
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRATION_MINUTE: "30"
    steps:
      - name: Pull Git Repository
        uses: actions/checkout@v2

      - name: Say Hi to Happi
        run: echo "Bonjour Willy"

      - name: Install Python Version 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install All Dependencies
        run: pip install -r requirements.txt

      - name: Wait for Postgres
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -U user -d testdb && break
            sleep 2
          done

      - name: Run Migrations
        run: alembic upgrade head

      # Run unit tests
      - name: Run Tests
        run: pytest --maxfail=1 --disable-warnings -q

  processus_de_deploiement:
    runs-on: ubuntu-latest
    needs:
      - Test-process
    environment:
      name: production

    steps:
      - name: Pull Git Repository
        uses: actions/checkout@v2

      - name: Deploy to Ubuntu Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_AUDACE_HOST }}
          username: ${{ secrets.PROD_AUDACE_USERNAME }}
          password: ${{ secrets.PROD_AUDACE_PASSWORD }}
          script: |
            cd app/src
            git checkout -- api_logs.log 
            git pull
            cd ..
            source venv/bin/activate
            cd src
            alembic upgrade head
            sudo systemctl restart api

      # - name: Check API Status
      #   run: curl -f http://${{ secrets.PROD_AUDACE_HOST }}/health || exit 1
      # git checkout -- api_logs.log   # Pour annuler les modifications sur le fichier api_logs.log
      # git pull # Pour récupérer les modifications sur le dépôt distant
      # alembic upgrade head # Pour mettre à jour la base de données
      # sudo systemctl restart api # Pour redémarrer le service API
